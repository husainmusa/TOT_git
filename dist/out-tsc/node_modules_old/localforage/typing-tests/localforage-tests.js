import * as localforage from 'localforage';
var localForage = localforage;
var LocalForageTest;
(function (LocalForageTest) {
    localForage.clear(function (err) {
        var newError = err;
    });
    localForage.getSerializer().then(function (s) {
        var serializer = s;
        typeof serializer.bufferToString === "function";
        typeof serializer.deserialize === "function";
        typeof serializer.serialize === "function";
        typeof serializer.stringToBuffer === "function";
    });
    localForage.iterate(function (value, key, num) {
        var newStr = value;
        var newKey = key;
        var newNum = num;
    });
    localForage.iterate(function (value, key, num) {
        var newStr = value;
        var newKey = key;
        var newNum = num;
    });
    localForage.iterate(function (value, key, num) {
        var newStr = value;
        var newKey = key;
        var newNum = num;
    });
    localForage.iterate(function (str, key, num) {
        var newStr = str;
        var newKey = key;
        var newNum = num;
    });
    localForage.iterate(function (str, key, num) {
        var newStr = str;
        var newKey = key;
        var newNum = num;
        if (newStr === 'END') {
            return newNum;
        }
    }).then(function (result) {
        if (result) {
            var numResult = result;
        }
    });
    localForage.iterate(function (str, key, num) {
        var newStr = str;
        var newKey = key;
        var newNum = num;
        if (newStr === 'END') {
            return newNum;
        }
    }).then(function (result) {
        if (result) {
            var numResult = result;
        }
    });
    localForage.iterate(function (str, key, num) {
        var newStr = str;
        var newKey = key;
        var newNum = num;
        if (newStr === 'END') {
            return newNum;
        }
    }).then(function (result) {
        if (result) {
            var numResult = result;
        }
    });
    localForage.length(function (err, num) {
        var newError = err;
        var newNumber = num;
    });
    localForage.length().then(function (num) {
        var newNumber = num;
    });
    localForage.key(0, function (err, value) {
        var newError = err;
        var newValue = value;
    });
    localForage.keys(function (err, keys) {
        var newError = err;
        var newArray = keys;
    });
    localForage.keys().then(function (keys) {
        var newArray = keys;
    });
    localForage.getItem("key", function (err, str) {
        var newError = err;
        var newStr = str;
    });
    localForage.getItem("key").then(function (str) {
        var newStr = str;
    });
    localForage.setItem("key", "value", function (err, str) {
        var newError = err;
        var newStr = str;
    });
    localForage.setItem("key", "value").then(function (str) {
        var newStr = str;
    });
    localForage.removeItem("key", function (err) {
        var newError = err;
    });
    localForage.removeItem("key").then(function () {
    });
    var customDriver = {
        _driver: "CustomDriver",
        _initStorage: function (options) { },
        getItem: function (key, callback) { return Promise.resolve({}); },
        setItem: function (key, value, callback) { return Promise.resolve(value); },
        removeItem: function (key, callback) { return Promise.resolve(); },
        clear: function (callback) { return Promise.resolve(); },
        length: function (callback) { return Promise.resolve(5); },
        key: function (keyIndex, callback) { return Promise.resolve('aKey'); },
        keys: function (callback) { return Promise.resolve(['1', '2']); },
        iterate: function (iteratee, callback) { return Promise.resolve({}); },
    };
    localForage.defineDriver(customDriver);
    var customDriver2 = {
        _driver: "CustomDriver",
        _initStorage: function (options) { },
        _support: true,
        getItem: function (key, callback) { return Promise.resolve({}); },
        setItem: function (key, value, callback) { return Promise.resolve(value); },
        removeItem: function (key, callback) { return Promise.resolve(); },
        clear: function (callback) { return Promise.resolve(); },
        length: function (callback) { return Promise.resolve(5); },
        key: function (keyIndex, callback) { return Promise.resolve('aKey'); },
        keys: function (callback) { return Promise.resolve(['1', '2']); },
        iterate: function (iteratee, callback) { return Promise.resolve({}); },
    };
    localForage.defineDriver(customDriver2);
    var customDriver3 = {
        _driver: "CustomDriver",
        _initStorage: function (options) { },
        _support: function () { return Promise.resolve(true); },
        getItem: function (key, callback) { return Promise.resolve({}); },
        setItem: function (key, value, callback) { return Promise.resolve(value); },
        removeItem: function (key, callback) { return Promise.resolve(); },
        clear: function (callback) { return Promise.resolve(); },
        length: function (callback) { return Promise.resolve(5); },
        key: function (keyIndex, callback) { return Promise.resolve('aKey'); },
        keys: function (callback) { return Promise.resolve(['1', '2']); },
        iterate: function (iteratee, callback) { return Promise.resolve({}); },
        dropInstance: function (dbInstanceOptions, callback) { return Promise.resolve(); },
    };
    localForage.defineDriver(customDriver3);
    localForage.getDriver("CustomDriver").then(function (result) {
        var driver = result;
        // we need to use a variable for proper type guards before TS 2.0
        var _support = driver._support;
        if (typeof _support === "function") {
            // _support = _support.bind(driver);
            _support().then(function (result) {
                var doesSupport = result;
            });
        }
        else if (typeof _support === "boolean") {
            var doesSupport = _support;
        }
    });
    {
        var config = void 0;
        var configOptions = {
            name: "testyo",
            driver: localForage.LOCALSTORAGE
        };
        config = localForage.config(configOptions);
        config = localForage.config({
            name: "testyo",
            driver: localForage.LOCALSTORAGE
        });
    }
    {
        var store = void 0;
        var configOptions = {
            name: "da instance",
            driver: localForage.LOCALSTORAGE
        };
        store = localForage.createInstance(configOptions);
        store = localForage.createInstance({
            name: "da instance",
            driver: localForage.LOCALSTORAGE
        });
    }
    {
        localForage.dropInstance().then(function () { });
        var dropInstanceOptions = {
            name: "da instance",
            storeName: "da store"
        };
        localForage.dropInstance(dropInstanceOptions).then(function () { });
        localForage.dropInstance({
            name: "da instance",
            storeName: "da store"
        }).then(function () { });
        var dropDbOptions = {
            name: "da instance",
        };
        localForage.dropInstance({
            name: "da instance",
        }).then(function () { });
    }
    {
        var testSerializer_1;
        localForage.getSerializer()
            .then(function (serializer) {
            testSerializer_1 = serializer;
        });
        localForage.getSerializer(function (serializer) {
            testSerializer_1 = serializer;
        });
    }
    {
        localForage.ready().then(function () { });
        localForage.ready(function (error) {
            if (error) {
            }
            else {
            }
        });
    }
})(LocalForageTest || (LocalForageTest = {}));
//# sourceMappingURL=localforage-tests.js.map